AWSTemplateFormatVersion: '2010-09-09'
Resources:

  # S3 Bucket for UI (private access)
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: budget-ui-blw1998
      AccessControl: Private
      WebsiteConfiguration:
        IndexDocument: App.js

  # IAM Role for Lambda to access RDS
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaRDSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                  - secretsmanager:GetSecretValue
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Lambda Function (created without initial code)
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: budgetBFF
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return "Lambda created without initial code."
      Environment:
        Variables:
          DB_HOST: budget.c1w8icmaiq0g.us-east-2.rds.amazonaws.com
          DB_PORT: '5432'
          DB_USER: postgres
          DB_NAME: postgres

  # API Gateway
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: BudgetAPI
      Description: API Gateway for Budget Lambda function

  # API Gateway Method directly on the root resource (no additional path)
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
    DependsOn: MyLambdaFunction  # Ensure Lambda function exists before the method

  # Lambda Permission for API Gateway (moved to a separate logical resource)
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/prod/POST/*"
    DependsOn: ApiGatewayMethod  # Ensure the method is created before permission is set

  # API Gateway Deployment (created after permissions and methods)
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: [ApiGatewayMethod, LambdaInvokePermission]
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod

  # API Gateway Resource to enable CORS
  ApiGatewayOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{statusCode:200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
    DependsOn: ApiGatewayDeployment  # Ensure the deployment is done before setting CORS options

Outputs:
  S3BucketName:
    Description: Name of the S3 bucket for UI
    Value: !Ref MyS3Bucket

  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref MyLambdaFunction

  ApiGatewayUrl:
    Description: URL of the API Gateway
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
